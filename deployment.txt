1. Keep all css and javascript code separate from html file in separate files.
2. To watch for changes to the styles.scss file and automatically compile it to the css file, and
   run multiple NPM scripts in parallel using parallelshell NPM module,
   we will install couple of npm packages as below:
* npm watch module called "Onchange" that watches for any changes in the file/code.We can also use --watch module.
* npm parallelshel module: Allows us to execute multiple npm scripts in parallel shells and keep watch on various files simultaneously while carrying out other tasks.
npm install --save-dev onchange@3.3.0 parallelshell@3.0.2
Now within your npm scripts, add :
"watch:scss": "onchange 'css/*.scss' -- npm run scss"
"watch:all" : "parallelshel 'npm run watch:scss' 'npm run lite'"

Then change "npm run lite" in "start" script  to "npm run watch:all"
Now with typing npm start we will be able to run lite server as well as start watch on .scss file to restart server if any change occurs in .scss or html file.

3. Next we will build a distribution folder which contains all the files for our project that we can simply deploy to a web server that hosts our website:
That is we will be doing a CSS modification, concatenation, and JavaScript uglification, minification, and HTML minification and then generate a distribution folder with all the files. But essentially forms the set of files that can be deployed to our web server that hosts our website.
To do so first we will combine all our scripts/ JS files into a single JavaScript file that will be delivered from our web server to a browser that is trying to view our website.
This way, we minimize the number of downloads that the browser needs to do in order to render our website.
Similarly, we're going to combine all the CSS code into one single CSS file, so that it can be delivered.
So the combined CSS file will contain all the code for Bootstrap plus Bootstrap social, and also the Font Awesome and also the CSS code that we ourselves wrote.
Similarly, there will be a single JavaScript file which will contain the jQuery tether, Bootstrap and the JavaScript code that we, ourselves wrote, all combined together in one single file.
Deployment is done is to combine them into a single file so that one single download you get all the JavaScript code necessary for rendering your web page.
One single download you get all the CSS code necessary for rendering your web page.
And then, of course, the HTML file itself is going to be downloaded.
To get these tasks to be completed, we need to use a certain set of NPM modules to accomplish this. Now, what we will end up doing is to build a folder in our projects file, and then we call that folder as dist,a distribution folder
This folder will contain all the files that can be simply copied to the web server that hosts our website.
Steps for project build are :
1. Clean out a distribution folder using the clean NPM module.
2. Copy files from one folder to another.
3. Prepare a minified and concatenated css file from all the css files used in your project
4. Prepare an uglified and concatenated JS file containing all the JS code used in your project.

1. Cleaning up a Distribution Folder:
  Install the rimraf npm module by typing the following at the prompt:
  npm install --save-dev rimraf@2.6.2
  Then, set up the following script:
  "clean": "rimraf dist",

2. Copying Fonts:
  Your project uses font-awesome fonts.
  These need to be copied to the distribution folder.
  To help us do this, install the copyfiles NPM module globally as follows:
  sudo npm -g install copyfiles@2.0.0
  Then set up the following script:
  "copyfonts": "copyfiles -f node_modules/font-awesome/fonts/* dist/fonts"

3. Compressing and Minifying Images:
   We use the imagemin-cli NPM module to help us to compress our images to reduce the size of the images being used in our project.
   Install the imagemin-cli module as follows:
   sudo npm -g install imagemin-cli@3.0.0 --unsafe-perm=true --allow-root
   Then set up the following script:
   "imagemin": "imagemin img/* --out-dir='dist/img'"

4. Preparing the Distribution Folder:
   Open .gitignore and update it as follows. We do not want the dist folder to be checked into the git repository.
   node_modules
   dist
   Then, install the usemin-cli, cssmin, uglifyjs and htmlmin NPM packages as follows:
   npm install --save-dev usemin-cli@0.5.1 cssmin@0.4.3 uglifyjs@2.4.11 htmlmin@0.0.7
   Add the following two scripts to the package.json file:
    "usemin": "usemin contactus.html -d dist --htmlmin -o dist/contactus.html && usemin aboutus.html -d dist --htmlmin -o dist/aboutus.html && usemin index.html -d dist --htmlmin -o dist/index.html",
    "build": "npm run clean && npm run imagemin && npm run copyfonts && npm run usemin"
   Open index.html and surround the css links inclusion code as follows:
    <!-- build:css css/main.css -->
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="node_modules/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="node_modules/bootstrap-social/bootstrap-social.css">
    <link href="css/styles.css" rel="stylesheet">
    <!-- endbuild -->
    Do the same change in aboutus.html and contactus.html
    Similarly, open index.html and surround the js script inclusion code as follows:
     <!-- build:js js/main.js -->
    <script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
    <script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
    <script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="js/scripts.js"></script>
    <!-- endbuild -->
    Do the same change in aboutus.html and contactus.html

    To build the distribution folder, you can type the following at the prompt:
    npm run build
    This will build the dist folder containing the files that are a self-contained version of your project. You can now copy the contents of this folder to a web server that hosts your website.
    You can now check your dist build folder by typing in the browser url as localhost:3000/dist/index.html

Task Runners :
  We can use task runners (Gulp or Grunt) as well to facilitate automation of various web development tasks intead of writing/ using scripts as above.
  The primary task of a Task Runner is to enable us to configure the tasks and then rerun them automatically as it when request.
  Task runners are the javascript codes that setup and run the tasks that we did above for building scripts automatically for us i.e tasks of executing and building and deploying our website.
  Grunt operates based on doing configuration whereas Gulp concentrates more on code.
  But both of them pretty much enable us to accomplish the same kind of tasks.
  Both are built around plugins. So, both Grunt and Gulp provide a framework for which you write various plugins that enable you to perform these kinds of tasks.

Build & Deploy Using Grunt:
1.Install Grunt CLI : sudo npm install -g grunt-cli@1.2.0
  This will install the Grunt CLI globally so that you can use them in all projects.
  Next install Grunt to use within your project. To do this, go to the conFusion folder and type the following at the prompt:
  npm install grunt@1.0.2 --save-dev
  This will install local per-project Grunt to use within your project.

2.Creating a Grunt File:
  Next you need to create a Grunt file containing the configuration for all the tasks to be run when you use Grunt.
  To do this, create a file named Gruntfile.js in the conFusion folder.
  Next, add the following code to Gruntfile.js to set up the file to configure Grunt tasks:
  'use strict';
  module.exports = function (grunt) {
    // Define the configuration for all the tasks
    grunt.initConfig({

    });
  };
  This sets up the Grunt module ready for including the grunt tasks inside the function above.

3. Compiling SCSS to CSS:
   Next, we are going to set up our first Grunt task.
   The SASS task converts the SCSS code to CSS.
   To do this, you need to include some Grunt modules that help us with the tasks.
   Install the following modules by typing the following at the prompt:
   npm install grunt-sass@2.1.0 --save-dev
   npm install time-grunt@1.4.0 --save-dev
   npm install jit-grunt@0.10.0 --save-dev
   The first one installs the Grunt module for SCSS to CSS conversion.
   The time-grunt module generates time statistics about how much time each task consumes,
   and jit-grunt enables us to include or (load in) the necessary downloaded Grunt modules when needed for the tasks.
   The Jit Grunt module is used for loading in those Grunt plug-ins whenever they are required within any application.
   The other alternative is to load in the various Grunt modules explicitly in your Grunt config file.
   I prefer to use the Jit Grunt so that it'll take care of loading in whatever Grunt plug-ins that I need as may be required, as in when I make use of them in the code.
   Now, configure the SASS task in the Gruntfile as follows, by including the code inside the function in Gruntfile.js:

   'use strict';
    module.exports = function (grunt) {
        // Time how long tasks take. Can help when optimizing build times
        require('time-grunt')(grunt);

        // Automatically load required Grunt tasks
        require('jit-grunt')(grunt);

        // Define the configuration for all the tasks
        grunt.initConfig({
            sass: {
                dist: {
                    files: {
                        'css/styles.css': 'css/styles.scss'
                    }
                }
            }
        });

        grunt.registerTask('css', ['sass']);

    };

    Now you can run the grunt SASS task by typing the following at the prompt:
    grunt css

4. Watch and Serve Tasks:
   The final step is to use the Grunt modules watch and browser-sync to spin up a web server
   and keep a watch on the files and automatically reload the browser when any of the watched files are updated.
   To do this, install the following grunt modules:
   npm install grunt-contrib-watch@1.0.0 --save-dev
   npm install grunt-browser-sync@2.2.0 --save-dev
   After this, we will configure the browser-sync and watch tasks by adding the following code to the Grunt file:

   ,
        watch: {
            files: 'css/*.scss',
            tasks: ['sass']
        },
        browserSync: {
            dev: {
                bsFiles: {
                    src : [
                        'css/*.css',
                        '*.html',
                        'js/*.js'
                    ]
                },
                options: {
                    watchTask: true,
                    server: {
                        baseDir: "./"
                    }
                }
            }
        }

    Then add the following task to the Grunt file:

    grunt.registerTask('default', ['browserSync', 'watch']);

    So with this, I've configured my watchTask, to keep a watch on the SCSS files
    and then automatically convert them by invoking the SASS.
    Now with the watchTask I can actually keep a watch on several files, and then automatically invoke the corresponding tasks for those files.
    So for example I can keep a watch on my JavaScript files and then automatically do JS hinting, when my files change.
    Or to do identification and so on.

    I need to execute browserSync and also second task that I'm going to do is watch.
    I will have to do the browserSync task first and then the watchTask later.
    Because the browserSync task will start serving up my server.
    If I do the watchTask first and the browserSync task later, the watchTask will basically, stop everything and then all the remaining tasks behind that will not execute.
    So if you are using the watchTask, do that as a last one in the sequence that you specify in this square brackets.

    Now if you type "grunt" at the command prompt:
    it will start the server, and open the web page in your default browser.
    It will also keep a watch on the files in the css folder,
    and if you update any of them, it will compile the scss file into css file and load the updated page into the browser (livereload).

5.  Copying the Files and Fonts and Cleaning Up the Dist Folder:
    We will install the Grunt modules to copy over files to a distribution folder named dist,
    and clean up the dist folder when needed.
    To do this, install the following Grunt modules:

    npm install grunt-contrib-copy@1.0.0 --save-dev
    npm install grunt-contrib-clean@1.1.0 --save-dev

    Now add the code to perform the copying of files to the dist folder,
    and cleaning up the dist folder.
    To do this, add the following code to Gruntfile.js.
    This should be added right after the configuration of the SASS task.:

    ,

        copy: {
            html: {
                files: [
                {
                    //for html
                    expand: true,
                    dot: true,
                    cwd: './',
                    src: ['*.html'],
                    dest: 'dist'
                }]
            },
            fonts: {
                files: [
                {
                    //for font-awesome
                    expand: true,
                    dot: true,
                    cwd: 'node_modules/font-awesome',
                    src: ['fonts/*.*'],
                    dest: 'dist'
                }]
            }
        },

        clean: {
            build: {
                src: [ 'dist/']
            }
        }
        Remember to add the comma after the end of the SASS task.

6.  Compressing and Minifying Images:
    Next we install the grunt-contrib-imagemin module and use it to process the images.
    To install this module type at the prompt:

    npm install grunt-contrib-imagemin@2.0.1 --save-dev

    Then, configure the imagemin task as shown below in the Gruntfile:

    ,
        imagemin: {
            dynamic: {
                files: [{
                    expand: true,                  // Enable dynamic expansion
                    cwd: './',                   // Src matches are relative to this path
                    src: ['img/*.{png,jpg,gif}'],   // Actual patterns to match
                    dest: 'dist/'                  // Destination path prefix
                }]
            }
        }

7. Preparing the Distribution Folder and Files:
   We are now going to use the Grunt usemin module together with concat, cssmin, uglify and filerev to prepare the distribution folder. To do this, install the following Grunt modules:

    npm install grunt-contrib-concat@1.0.1 --save-dev
    npm install grunt-contrib-cssmin@2.2.1 --save-dev
    npm install grunt-contrib-htmlmin@2.4.0 --save-dev
    npm install grunt-contrib-uglify@3.3.0 --save-dev
    npm install grunt-filerev@2.3.1 --save-dev
    npm install grunt-usemin@3.1.1 --save-dev

    Next, update the task configuration within the Gruntfile.js with the following additional code to introduce the new tasks:

    ,

        useminPrepare: {
            foo: {
                dest: 'dist',
                src: ['contactus.html','aboutus.html','index.html']
            },
            options: {
                flow: {
                    steps: {
                        css: ['cssmin'],
                        js:['uglify']
                    },
                    post: {
                        css: [{
                            name: 'cssmin',
                            createConfig: function (context, block) {
                            var generated = context.options.generated;
                                generated.options = {
                                    keepSpecialComments: 0, rebase: false
                                };
                            }
                        }]
                    }
                }
            }
        },

        // Concat
        concat: {
            options: {
                separator: ';'
            },

            // dist configuration is provided by useminPrepare
            dist: {}
        },

        // Uglify
        uglify: {
            // dist configuration is provided by useminPrepare
            dist: {}
        },

        cssmin: {
            dist: {}
        },

        // Filerev
        filerev: {
            options: {
                encoding: 'utf8',
                algorithm: 'md5',
                length: 20
            },

            release: {
            // filerev:release hashes(md5) all assets (images, js and css )
            // in dist directory
                files: [{
                    src: [
                        'dist/js/*.js',
                        'dist/css/*.css',
                    ]
                }]
            }
        },

        // Usemin
        // Replaces all assets with their revved version in html and css files.
        // options.assetDirs contains the directories for finding the assets
        // according to their relative paths
        usemin: {
            html: ['dist/contactus.html','dist/aboutus.html','dist/index.html'],
            options: {
                assetsDirs: ['dist', 'dist/css','dist/js']
            }
        },

        htmlmin: {                                         // Task
            dist: {                                        // Target
                options: {                                 // Target options
                    collapseWhitespace: true
                },
                files: {                                   // Dictionary of files
                    'dist/index.html': 'dist/index.html',  // 'destination': 'source'
                    'dist/contactus.html': 'dist/contactus.html',
                    'dist/aboutus.html': 'dist/aboutus.html',
                }
            }
        }

    Next, update the jit-grunt configuration as follows, to inform it that useminPrepare task depends on the usemin package:

    require('jit-grunt')(grunt, {
    useminPrepare: 'grunt-usemin'
   });

   Next, update the Grunt build task as follows:

    grunt.registerTask('build', [
        'clean',
        'copy',
        'imagemin',
        'useminPrepare',
        'concat',
        'cssmin',
        'uglify',
        'filerev',
        'usemin',
        'htmlmin'
   ]);

   Now if you run Grunt, it will create a dist folder with the files structured correctly to be distributed to a server to host your website. To do this, type the following at the prompt:

   grunt build


Deployment Using GULP Task Runner:

1. Installing Gulp:
   At the command prompt, type the following to install Gulp command-line interface (CLI) globally:

   npm install -g gulp-cli@2.0.1

   This will install the Gulp globally so that you can use it in all projects.
   Next install Gulp to use within your project.
   To do this, go to the conFusion folder and type the following at the prompt:

   npm install gulp@3.9.1 --save-dev

   This will install local per-project Gulp to use within your project.

2. Install Gulp Plugins for SASS and Browser-Sync:

   Install all the Gulp plugins that you will need for this exercise. To do this, type the following at the command prompt:

   npm install gulp-sass@3.1.0  browser-sync@2.23.6 --save-dev

3. Creating a Gulp File:
   Next you need to create a Gulp file containing the tasks to be run when you use Gulp.
   To do this, create a file named gulpfile.js in the conFusion folder.

4. Loading Gulp Plugins:
   Load in all the Gulp plugins by including the following code in the Gulp file:

   'use strict';

    var gulp = require('gulp'),
    sass = require('gulp-sass'),
    browserSync = require('browser-sync');

5. Adding Gulp Tasks for SASS and Browser-Sync:
   Next, we will add the code for the SASS task, the Browser-Sync task and the default task as follows:

    gulp.task('sass', function () {
    return gulp.src('./css/*.scss')
        .pipe(sass().on('error', sass.logError))
        .pipe(gulp.dest('./css'));
    });

    gulp.task('sass:watch', function () {
    gulp.watch('./css/*.scss', ['sass']);
    });

    gulp.task('browser-sync', function () {
    var files = [
        './*.html',
        './css/*.css',
        './img/*.{png,jpg,gif}',
        './js/*.js'
    ];

    browserSync.init(files, {
        server: {
            baseDir: "./"
        }
    });

    });

    // Default task
    gulp.task('default', ['browser-sync'], function() {
        gulp.start('sass:watch');
    });

    Save the Gulp file

6.  Running the Gulp Tasks:
    At the command prompt, if you type gulp it will run the default task:
    gulp

7.  Copying the Files and Cleaning up the Dist Folder:
    We will now create the tasks for copying the font files and cleaning up the distribution folder.
    To do this we will first install the del Node module and require it in the Gulp file as follows:

    npm install del@3.0.0 --save-dev

    within var gulp = require('gulp'), add this line of code at the bottom:
    del = require('del')


    Next, we will add the code for the Clean task and the copyfonts task as follows:

    // Clean
    gulp.task('clean', function() {
        return del(['dist']);
    });

    gulp.task('copyfonts', function() {
    gulp.src('./node_modules/font-awesome/fonts/**/*.{ttf,woff,eof,svg}*')
    .pipe(gulp.dest('./dist/fonts'));
    });

8.  Compressing and Minifying Images:
    We will now install the gulp-imagemin plugin and configure the imagemin task.
    To do this we install the plugin and require it as follows:

    npm install gulp-imagemin@4.1.0 --save-dev

    within var gulp = require('gulp'), add this line of code at the bottom:
    imagemin = require('gulp-imagemin'),


    Next, we create the imagemin task as follows:

    // Images
    gulp.task('imagemin', function() {
    return gulp.src('img/*.{png,jpg,gif}')
        .pipe(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true }))
        .pipe(gulp.dest('dist/img'));
    });

9.  Preparing the Distribution Folder and Files:
    We now install the gulp-usemin and other related Gulp plugins and require them as follows:

    npm install gulp-uglify@3.0.0 gulp-usemin@0.3.29 gulp-rev@8.1.1 gulp-clean-css@3.9.3 gulp-flatmap@1.0.2 gulp-htmlmin@4.0.0 --save-dev

    within var gulp = require('gulp'), add this line of code at the bottom:

    uglify = require('gulp-uglify'),
    usemin = require('gulp-usemin'),
    rev = require('gulp-rev'),
    cleanCss = require('gulp-clean-css'),
    flatmap = require('gulp-flatmap'),
    htmlmin = require('gulp-htmlmin');

    We configure the usemin and the build task as follows:

    gulp.task('usemin', function() {
      return gulp.src('./*.html')
        .pipe(flatmap(function(stream, file){
            return stream
                .pipe(usemin({
                    css: [ rev() ],
                    html: [ function() { return htmlmin({ collapseWhitespace: true })} ],
                    js: [ uglify(), rev() ],
                    inlinejs: [ uglify() ],
                    inlinecss: [ cleanCss(), 'concat' ]
                }))
        }))
        .pipe(gulp.dest('dist/'));
    });

    gulp.task('build',['clean'], function() {
        gulp.start('copyfonts','imagemin','usemin');
    });

    Save the Gulp file

10. Running the Gulp Tasks:
    At the command prompt, if you type gulp build it will run the build task:
    gulp build